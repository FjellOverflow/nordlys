---
import Prose from '@/components/layout/Prose.astro'

interface Heading {
  depth: number
  slug: string
  text: string
}

type ProcessedHeading = Heading & { children: ProcessedHeading[] }

export interface Props {
  headings: Heading[]
  open?: boolean
}

const { headings, open = false } = Astro.props

function appendHeading(headings: ProcessedHeading[], newHeading: Heading) {
  const previousHeading = headings[headings.length - 1]

  if (!previousHeading || previousHeading.depth === newHeading.depth)
    headings.push({ ...newHeading, children: [] })
  else appendHeading(previousHeading.children, newHeading)
}

const processedHeadings: ProcessedHeading[] = []

headings.forEach((heading) => {
  appendHeading(processedHeadings, heading)
})

function renderList(headings: ProcessedHeading[]): string {
  if (!headings.length) return ''

  return `<ul class="mt-1 mb-1 list-none">
          ${headings
            .map(
              (heading) => `<li class="mt-1 mb-1">
                              <a href="#${heading.slug}" class="no-underline hover:underline toc-el" aria-label="${heading.text}">
                                ${heading.text}
                              </a>
                              ${renderList(heading.children)}
                            </li>`
            )
            .join('')}
          </ul>`
}
---

<div class="overflow-x-hidden p-4">
  <Prose>
    <h2 class="no-anchor mb-2">Table of Contents</h2>

    <details {open}>
      <summary>Show more</summary>
      <Fragment set:html={renderList(processedHeadings)} />
    </details>
  </Prose>
</div>

<script>
  function attachTocObserver() {
    const intersectionRatios: Record<string, number> = {}

    const tocObserver = new IntersectionObserver(
      (articleSections) => {
        for (const section of articleSections) {
          const sectionId = section.target.querySelector('h2,h3,h4,h5')?.id

          if (sectionId)
            intersectionRatios[sectionId] = section.intersectionRatio
        }

        document
          .querySelectorAll('.toc-el')
          .forEach((e) => e.classList.remove('underline'))

        const maxVisibility = Math.max(...Object.values(intersectionRatios))
        const [sectionId] =
          Object.entries(intersectionRatios).find(
            ([_id, visibility]) => visibility == maxVisibility
          ) || []

        document
          .querySelectorAll(`[href="#${sectionId}"]`)
          .forEach((el) => el.classList.add('underline'))
      },
      {
        threshold: [0.33, 0.66, 1]
      }
    )

    document
      .querySelectorAll('article section')
      .forEach((articleSection) => tocObserver.observe(articleSection))
  }

  document.addEventListener('astro:page-load', () => {
    attachTocObserver()
  })
</script>
